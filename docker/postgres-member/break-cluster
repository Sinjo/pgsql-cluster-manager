#!/usr/bin/env bash

set -eu

# Automated by this script:
#
# - Create a table called temp (SERIAL, TEXT)
# - SELECT pg_switch_xlog
# - Put the cluster into maintenance mode
# - Insert data
# - kill -9 the primary Postgres instance
# - Copy latest WAL out to edit

# Manual steps:
#
# - Set one of the WAL record sizes to zero (null byte)
# - Copy that WAL into /tmp/wals/ on both replicas
# - Take the cluster out of maintenance
# - See what lols ensue

# Discarded steps:
#
# - Edit restore_command to restore from /tmp/wals/ (now set in initial config)
# - Restart Postgres on both replicas to pick up recovery conf (no changes needed)
# - Turn off replication on replicas (primary_conninfo) (no need, hard killing primary)

# node-exec <container> <cmd>...
function node-exec() {
  docker exec "$1" "${@:2}"
}

# write-file <container> <filepath>
function write-file() {
  echo -e "[$1]\twriting file $2..."
  docker exec -i "$1" bash -c "cat > $2"
}

function disable-streaming-replication() {
  echo -e "[$1]\tcreating recovery.conf with no primary_conninfo"
  cat <<EOF | write-file "$1" /var/lib/postgresql/9.4/main/recovery.conf
standby_mode = 'on'
restore_command = 'cp /tmp/wals/%f %p'
recovery_target_timeline = 'latest'
EOF
}

function reload-postgres() {
  echo -e "[$1]\treloading postgres..."
  node-exec "$1" psql -U postgres postgres -c "select pg_reload_conf();"
}

function add-backup-vip() {
  echo -e "[$1]\tadding backup VIP to cluster..."
  node-exec "$1" crm configure primitive PostgresqlBackupVIP ocf:heartbeat:IPaddr2 params ip=172.17.0.101 cidr_netmask=32 op monitor interval=5s
  node-exec "$1" crm configure colocation backup-vip-not-with-master -inf: PostgresqlBackupVIP msPostgresql:Master
}

function force-backup-vip-to-node() {
  echo -e "[$1]\tforcing backup VIP to node $1..."
  # VIP might already be in the right place
  node-exec "$1" crm resource migrate PostgresqlBackupVIP $1 || return 0
  node-exec "$1" crm resource unmigrate PostgresqlBackupVIP || return 0
}

function kill-nine-postgres() {
  local pid
  echo -e "[$1]\thard killing postgres..."
  pid=$(node-exec "$1" head -n1 /var/lib/postgresql/9.4/main/postmaster.pid)
  node-exec "$1" kill -9 $pid
}

function turn-off-corosync() {
  echo -e "[$1]\tturning off pacemaker..."
  # For some reason this succeeds, but exits 1, and I don't care to figure out why
  node-exec "$1" service pacemaker stop || return 0
}

function create-fake-baboon() {
  echo -e "[$1]\tcreating WAL directory to simulate Barman server..."
  node-exec "$1" sudo -u postgres mkdir -p /tmp/wals/
}

function get-latest-wal-name() {
  local latest_file
  latest_file=$(node-exec "$1" sudo -u postgres ls -tr1 /var/lib/postgresql/9.4/main/pg_xlog/ | grep -v .history | grep -v archive_status | tail -n1)
  # How to "return" a string in bash
  echo $latest_file
}

function extract-wal() {
  echo -e "[$1]\textracting latest WAL file $2 from node $1..."
  docker cp "$1":/var/lib/postgresql/9.4/main/pg_xlog/"$2" .
}

function break-wal() {
  echo -e "[$1]\tbreaking WAL file $1..."
  "$(dirname $0)"/break-wal "$1"
}

function inject-wal() {
  local without_suffix
  echo -e "[$1]\tinjecting WAL file $2 into node $1..."
  without_suffix=$(basename -s .broken "$2")
  docker cp $2 "$1":/tmp/wals/"$without_suffix"
}

function send-signal-postgres-worker() {
  local process_pid
  echo -e "[$1]\tKilling $2 process with $3 on $1..."
  process_pid=$(node-exec "$1" ps -ef | grep postgres | grep $2 | awk '{ print $2}')
  echo -e "[$1]\t$2 process pid is $process_pid"
  node-exec "$1" kill -"$3" $process_pid
}

PRIMARY="$(node-exec pg01 bash -c "crm node list | grep -B1 LATEST | head -n1 | cut -d'(' -f1")"
SYNC="$(node-exec pg01 bash -c "crm node list | grep -B1 SYNC | head -n1 | cut -d'(' -f1")"
POTENTIAL="$(node-exec pg01 bash -c "crm node list | grep -B1 POTENTIAL | head -n1 | cut -d'(' -f1")"

echo "Primary is $PRIMARY"
echo "Sync is $SYNC"
echo "Potential is $POTENTIAL"

add-backup-vip "$SYNC"
force-backup-vip-to-node "$SYNC"
sleep 2

read -p "Press enter to break everything"

node-exec "$PRIMARY" psql -U postgres postgres -c "CREATE TABLE repro (data TEXT);"
node-exec "$PRIMARY" psql -U postgres postgres -c "SELECT pg_switch_xlog();"

node-exec "$SYNC" bash -c "crm configure property maintenance-mode=true"

node-exec "$PRIMARY" psql -U postgres postgres -c "INSERT INTO repro VALUES ('A')";
node-exec "$PRIMARY" psql -U postgres postgres -c "INSERT INTO repro VALUES ('AB')";
node-exec "$PRIMARY" psql -U postgres postgres -c "INSERT INTO repro VALUES ('ABC')";
node-exec "$PRIMARY" psql -U postgres postgres -c "INSERT INTO repro VALUES ('ABC')";
node-exec "$PRIMARY" psql -U postgres postgres -c "INSERT INTO repro VALUES ('ABCD')";
node-exec "$PRIMARY" psql -U postgres postgres -c "INSERT INTO repro VALUES ('ABCDE')";
node-exec "$PRIMARY" psql -U postgres postgres -c "INSERT INTO repro VALUES ('ABCDEF')";
node-exec "$PRIMARY" psql -U postgres postgres -c "INSERT INTO repro VALUES ('ABCDEFG')";
node-exec "$PRIMARY" psql -U postgres postgres -c "INSERT INTO repro VALUES ('ABCDEFG')";
node-exec "$PRIMARY" psql -U postgres postgres -c "INSERT INTO repro VALUES ('ABCDEFGH')";
node-exec "$PRIMARY" psql -U postgres postgres -c "INSERT INTO repro VALUES ('ABCDEFGHI')";
node-exec "$PRIMARY" psql -U postgres postgres -c "INSERT INTO repro VALUES ('ABCDEFGHIJ')";
node-exec "$PRIMARY" psql -U postgres postgres -c "INSERT INTO repro VALUES ('ABCDEFGHIJK')";

kill-nine-postgres "$PRIMARY"
turn-off-corosync "$PRIMARY"

LATEST_WAL=$(get-latest-wal-name "$PRIMARY")
extract-wal "$PRIMARY" "$LATEST_WAL"

break-wal "$LATEST_WAL"

inject-wal "$SYNC" "$LATEST_WAL".broken
inject-wal "$POTENTIAL" "$LATEST_WAL".broken

read -p "Press enter to kill WAL writer on sync ($SYNC)"

# Running this query means we get the "aborting due to a crash in another process" log
node-exec "$SYNC" psql -U postgres postgres -c 'SELECT pg_sleep(10)' > /dev/null 2>&1 &
sleep 2
send-signal-postgres-worker $SYNC "writer" "SIGABRT"

read -p "Press enter to take Pacemaker cluster out of maintenance mode"

node-exec "$SYNC" bash -c "crm configure property maintenance-mode=false"
