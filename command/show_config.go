package command

import (
	"bytes"
	"fmt"

	"github.com/BurntSushi/toml"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
	"github.com/spf13/viper"
)

func NewShowConfigCommand() *cobra.Command {
	cm := &cobra.Command{
		Use:   "show-config",
		Short: "Prints configuration values",
		Long:  "Can be used to generate a template configuration file with sensible default values",
		Run:   showConfigCommandFunc,
		Example: `
  # Generate a config.toml that can then be passed as a flag to --config-file
  pgsql-cluster-manager show-config >/etc/pgsql-cluster-manager/config.toml`,
	}

	return cm
}

func showConfigCommandFunc(cmd *cobra.Command, args []string) {
	var configBuffer bytes.Buffer

	write := func(s string) {
		_, err := configBuffer.WriteString(s)
		if err != nil {
			logger.WithError(err).Fatal("Failed to show config")
		}
	}

	write("# Generated by `pgsql-cluster-manager show-config`\n")
	write("# See pgsql-cluster-manager --help for more detailed usage\n")
	write("# https://github.com/gocardless/pgsql-cluster-manager\n\n")

	walkFlags(cmd.Root(), func(flag *pflag.Flag) {
		if flag.Name == "help" || flag.Name == "config-file" {
			return
		}

		write(fmt.Sprintf("# %s\n", flag.Usage))
		toml.NewEncoder(&configBuffer).Encode(map[string]interface{}{flag.Name: viper.Get(flag.Name)})
		write("\n")
	})

	fmt.Printf(configBuffer.String())
}

func walkFlags(cmd *cobra.Command, cb func(*pflag.Flag)) {
	cmd.NonInheritedFlags().VisitAll(cb)

	for _, cmd := range cmd.Commands() {
		walkFlags(cmd, cb)
	}
}
